#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define ALPHABET_SIZE 26


void monoalphabetic_encrypt(char *plaintext, char *key) {
    int i;
    char ch;
    for(i = 0; plaintext[i] != '\0'; ++i) {
        ch = plaintext[i];
        if(isalpha(ch)) {
            if(islower(ch))
                plaintext[i] = tolower(key[ch - 'a']);
            else
                plaintext[i] = toupper(key[ch - 'A']);
        }
    }
}


void monoalphabetic_decrypt(char *ciphertext, char *key) {
    int i;
    char ch;
    for(i = 0; ciphertext[i] != '\0'; ++i) {
        ch = ciphertext[i];
        if(isalpha(ch)) {
            if(islower(ch))
                ciphertext[i] = tolower('a' + strchr(key, ch) - key);
            else
                ciphertext[i] = toupper('A' + strchr(key, tolower(ch)) - key);
        }
    }
}

int main() {
    char plaintext[100], ciphertext[100], key[ALPHABET_SIZE + 1];
    int choice;

    printf("Enter the key (a string of %d unique alphabets): ", ALPHABET_SIZE);
    scanf("%s", key);

    printf("Enter the plaintext to encrypt: ");
    scanf(" %[^\n]s", plaintext);

   
    strcpy(ciphertext, plaintext);
    monoalphabetic_encrypt(ciphertext, key);
    printf("Encrypted ciphertext: %s\n", ciphertext);

   
    monoalphabetic_decrypt(ciphertext, key);
    printf("Decrypted plaintext: %s\n", ciphertext);

    return 0;
}

output:Enter the key (a string of 26 unique alphabets): aehugvfdfbijdnfsakdfmlk
Enter the plaintext to encrypt: shivani
Encrypted ciphertext: ddflanf
Decrypted plaintext: hhgvang
